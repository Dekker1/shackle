FlatZinc {
    variables: {
        "X_INTRODUCED_0_": Variable {
            ty: IntSet,
            domain: Some(
                Int(
                    RangeList::from_iter([1..=3]),
                ),
            ),
            value: None,
            ann: [],
            defined: true,
            introduced: true,
        },
        "i": Variable {
            ty: Int,
            domain: Some(
                Int(
                    RangeList::from_iter([1..=3]),
                ),
            ),
            value: None,
            ann: [],
            defined: false,
            introduced: false,
        },
    },
    arrays: {
        "X_INTRODUCED_3_": Array {
            contents: [
                IntSet(
                    RangeList::from_iter([2..=3]),
                ),
                IntSet(
                    RangeList::from_iter([1..=1, 3..=3]),
                ),
                IntSet(
                    RangeList::from_iter([1..=2]),
                ),
            ],
            ann: [],
            defined: false,
            introduced: false,
        },
    },
    constraints: [
        Call {
            id: "array_set_element",
            args: [
                Literal(
                    Identifier(
                        "i",
                    ),
                ),
                Literal(
                    Identifier(
                        "X_INTRODUCED_3_",
                    ),
                ),
                Literal(
                    Identifier(
                        "X_INTRODUCED_0_",
                    ),
                ),
            ],
            ann: [],
        },
        Call {
            id: "set_in",
            args: [
                Literal(
                    Identifier(
                        "i",
                    ),
                ),
                Literal(
                    Identifier(
                        "X_INTRODUCED_0_",
                    ),
                ),
            ],
            ann: [],
        },
    ],
    output: [
        "i",
    ],
    solve: SolveObjective {
        method: Satisfy,
        objective: None,
        ann: [],
    },
    version: "",
}
